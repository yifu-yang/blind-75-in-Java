
import java.util.Arrays;
import java.util.stream.Collectors;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null){
            return "";
        }
        String res = String.valueOf(root.val);
        if(root.left==null){
            res += ",N";
        }else {
            res += ","+serialize(root.left);
        }
        if(root.right==null){
            res += ",N";
        }else {
            res += ","+serialize(root.right);
        }
        return res;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data==null||data.isEmpty()){
            return null;
        }
        List<String> elements = Arrays.stream(data.split(",")).collect(Collectors.toList());
        return dfs(elements);
    }

    TreeNode dfs(List<String> data){
        if("N".equals(data.get(0))){
            data.remove(0);
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(data.get(0)));
        data.remove(0);
        root.left = dfs(data);
        root.right = dfs(data);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));